/* eslint-disable */
/*Generated by GenDocu.com*/
// package: relay.processing.v1
// file: relay/processing/v1/payment_processing_service.proto

var relay_processing_v1_payment_processing_service_pb = require("../../../relay/processing/v1/payment_processing_service_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var PaymentProcessing = (function () {
  function PaymentProcessing() {}
  PaymentProcessing.serviceName = "relay.processing.v1.PaymentProcessing";
  return PaymentProcessing;
}());

PaymentProcessing.Authorize = {
  methodName: "Authorize",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.AuthorizeRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.AuthorizeResponse
};

PaymentProcessing.Cancel = {
  methodName: "Cancel",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.CancelRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.CancelResponse
};

PaymentProcessing.Capture = {
  methodName: "Capture",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.CaptureRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.CaptureResponse
};

PaymentProcessing.Charge = {
  methodName: "Charge",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.ChargeRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.ChargeResponse
};

PaymentProcessing.Refund = {
  methodName: "Refund",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.RefundRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.RefundResponse
};

PaymentProcessing.GetSummary = {
  methodName: "GetSummary",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.GetSummaryRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.GetSummaryResponse
};

PaymentProcessing.GetOperationsSummary = {
  methodName: "GetOperationsSummary",
  service: PaymentProcessing,
  requestStream: false,
  responseStream: false,
  requestType: relay_processing_v1_payment_processing_service_pb.GetOperationsSummaryRequest,
  responseType: relay_processing_v1_payment_processing_service_pb.GetOperationsSummaryResponse
};

exports.PaymentProcessing = PaymentProcessing;

function PaymentProcessingClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

PaymentProcessingClient.prototype.authorize = function authorize(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.Authorize, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentProcessingClient.prototype.cancel = function cancel(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.Cancel, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentProcessingClient.prototype.capture = function capture(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.Capture, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentProcessingClient.prototype.charge = function charge(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.Charge, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentProcessingClient.prototype.refund = function refund(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.Refund, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentProcessingClient.prototype.getSummary = function getSummary(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.GetSummary, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentProcessingClient.prototype.getOperationsSummary = function getOperationsSummary(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentProcessing.GetOperationsSummary, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.PaymentProcessingClient = PaymentProcessingClient;

