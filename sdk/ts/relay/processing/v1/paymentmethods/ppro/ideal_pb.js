/* eslint-disable */
/*Generated by GenDocu.com*/
// source: relay/processing/v1/paymentmethods/ppro/ideal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData', null, global);
goog.exportSymbol('proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData', null, global);
goog.exportSymbol('proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer', null, global);
goog.exportSymbol('proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData', null, global);
goog.exportSymbol('proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.displayName = 'proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.displayName = 'proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.displayName = 'proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.displayName = 'proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.displayName = 'proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentFlowData: (f = msg.getPaymentFlowData()) && proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.toObject(includeInstance, f),
    consumer: (f = msg.getConsumer()) && proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData;
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData;
      reader.readMessage(value,proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.deserializeBinaryFromReader);
      msg.setPaymentFlowData(value);
      break;
    case 2:
      var value = new proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer;
      reader.readMessage(value,proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.deserializeBinaryFromReader);
      msg.setConsumer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentFlowData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.serializeBinaryToWriter
    );
  }
  f = message.getConsumer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaymentFlowRedirectRequestData payment_flow_data = 1;
 * @return {?proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.getPaymentFlowData = function() {
  return /** @type{?proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} */ (
    jspb.Message.getWrapperField(this, proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData, 1));
};


/**
 * @param {?proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData|undefined} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} returns this
*/
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.setPaymentFlowData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.clearPaymentFlowData = function() {
  return this.setPaymentFlowData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.hasPaymentFlowData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Consumer consumer = 2;
 * @return {?proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.getConsumer = function() {
  return /** @type{?proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} */ (
    jspb.Message.getWrapperField(this, proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer, 2));
};


/**
 * @param {?proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer|undefined} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} returns this
*/
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.setConsumer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.clearConsumer = function() {
  return this.setConsumer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeRequestData.prototype.hasConsumer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentFlowData: (f = msg.getPaymentFlowData()) && proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData;
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData;
      reader.readMessage(value,proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.deserializeBinaryFromReader);
      msg.setPaymentFlowData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentFlowData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaymentFlowRedirectResponseData payment_flow_data = 1;
 * @return {?proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.prototype.getPaymentFlowData = function() {
  return /** @type{?proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData} */ (
    jspb.Message.getWrapperField(this, proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData, 1));
};


/**
 * @param {?proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData|undefined} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData} returns this
*/
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.prototype.setPaymentFlowData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.prototype.clearPaymentFlowData = function() {
  return this.setPaymentFlowData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.ChargeResponseData.prototype.hasPaymentFlowData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countryCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bic: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer;
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBic();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string country_code = 2;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bic = 3;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.getBic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.Consumer.prototype.setBic = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    successUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    failedUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cancelUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData;
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuccessUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFailedUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCancelUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFailedUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCancelUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string success_url = 1;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.getSuccessUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.setSuccessUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string failed_url = 2;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.getFailedUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.setFailedUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cancel_url = 3;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.getCancelUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectRequestData.prototype.setCancelUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    approvalUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData;
  return proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApprovalUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApprovalUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string approval_url = 1;
 * @return {string}
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.prototype.getApprovalUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData} returns this
 */
proto.relay.processing.v1.paymentmethods.ppro.ideal.PaymentFlowRedirectResponseData.prototype.setApprovalUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.relay.processing.v1.paymentmethods.ppro.ideal);
