/* eslint-disable */
/*Generated by GenDocu.com*/
// package: relay.processing.v1.paymentmethods.expressbank
// file: relay/processing/v1/paymentmethods/expressbank.proto

import * as jspb from "google-protobuf";

export class AuthorizeRequestData extends jspb.Message {
  hasPaymentFlowData(): boolean;
  clearPaymentFlowData(): void;
  getPaymentFlowData(): PaymentFlowRedirectRequestData | undefined;
  setPaymentFlowData(value?: PaymentFlowRedirectRequestData): void;

  clearItemsList(): void;
  getItemsList(): Array<string>;
  setItemsList(value: Array<string>): void;
  addItems(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthorizeRequestData.AsObject;
  static toObject(includeInstance: boolean, msg: AuthorizeRequestData): AuthorizeRequestData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthorizeRequestData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthorizeRequestData;
  static deserializeBinaryFromReader(message: AuthorizeRequestData, reader: jspb.BinaryReader): AuthorizeRequestData;
}

export namespace AuthorizeRequestData {
  export type AsObject = {
    paymentFlowData?: PaymentFlowRedirectRequestData.AsObject,
    itemsList: Array<string>,
  }
}

export class AuthorizeResponseData extends jspb.Message {
  hasPaymentFlowData(): boolean;
  clearPaymentFlowData(): void;
  getPaymentFlowData(): PaymentFlowRedirectResponseData | undefined;
  setPaymentFlowData(value?: PaymentFlowRedirectResponseData): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AuthorizeResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: AuthorizeResponseData): AuthorizeResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AuthorizeResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AuthorizeResponseData;
  static deserializeBinaryFromReader(message: AuthorizeResponseData, reader: jspb.BinaryReader): AuthorizeResponseData;
}

export namespace AuthorizeResponseData {
  export type AsObject = {
    paymentFlowData?: PaymentFlowRedirectResponseData.AsObject,
  }
}

export class PaymentFlowRedirectResponseData extends jspb.Message {
  getApprovalUrl(): string;
  setApprovalUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentFlowRedirectResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentFlowRedirectResponseData): PaymentFlowRedirectResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PaymentFlowRedirectResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentFlowRedirectResponseData;
  static deserializeBinaryFromReader(message: PaymentFlowRedirectResponseData, reader: jspb.BinaryReader): PaymentFlowRedirectResponseData;
}

export namespace PaymentFlowRedirectResponseData {
  export type AsObject = {
    approvalUrl: string,
  }
}

export class RefundRequestData extends jspb.Message {
  getReasonCode(): RefundReasonCodeMap[keyof RefundReasonCodeMap];
  setReasonCode(value: RefundReasonCodeMap[keyof RefundReasonCodeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RefundRequestData.AsObject;
  static toObject(includeInstance: boolean, msg: RefundRequestData): RefundRequestData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RefundRequestData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RefundRequestData;
  static deserializeBinaryFromReader(message: RefundRequestData, reader: jspb.BinaryReader): RefundRequestData;
}

export namespace RefundRequestData {
  export type AsObject = {
    reasonCode: RefundReasonCodeMap[keyof RefundReasonCodeMap],
  }
}

export class PaymentFlowRedirectRequestData extends jspb.Message {
  getSuccessUrl(): string;
  setSuccessUrl(value: string): void;

  getFailedUrl(): string;
  setFailedUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentFlowRedirectRequestData.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentFlowRedirectRequestData): PaymentFlowRedirectRequestData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PaymentFlowRedirectRequestData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentFlowRedirectRequestData;
  static deserializeBinaryFromReader(message: PaymentFlowRedirectRequestData, reader: jspb.BinaryReader): PaymentFlowRedirectRequestData;
}

export namespace PaymentFlowRedirectRequestData {
  export type AsObject = {
    successUrl: string,
    failedUrl: string,
  }
}

export interface RefundReasonCodeMap {
  DEFECT_IN_PRODUCT: 0;
  CUSTOMER_CHANGED_HIS_MIND: 1;
  PRODUCT_RECALLED: 2;
  TECHNICAL_OR_HUMAN_ERROR: 3;
}

export const RefundReasonCode: RefundReasonCodeMap;

