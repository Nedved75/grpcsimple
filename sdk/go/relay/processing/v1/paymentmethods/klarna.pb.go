// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: relay/processing/v1/paymentmethods/klarna.proto

package paymentmethods

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PurchaseType int32

const (
	PurchaseType_BUY       PurchaseType = 0
	PurchaseType_RENT      PurchaseType = 1
	PurchaseType_BOOK      PurchaseType = 2
	PurchaseType_SUBSCRIBE PurchaseType = 3
	PurchaseType_DOWNLOAD  PurchaseType = 4
	PurchaseType_ORDER     PurchaseType = 5
	PurchaseType_CONTINUE  PurchaseType = 6
)

// Enum value maps for PurchaseType.
var (
	PurchaseType_name = map[int32]string{
		0: "BUY",
		1: "RENT",
		2: "BOOK",
		3: "SUBSCRIBE",
		4: "DOWNLOAD",
		5: "ORDER",
		6: "CONTINUE",
	}
	PurchaseType_value = map[string]int32{
		"BUY":       0,
		"RENT":      1,
		"BOOK":      2,
		"SUBSCRIBE": 3,
		"DOWNLOAD":  4,
		"ORDER":     5,
		"CONTINUE":  6,
	}
)

func (x PurchaseType) Enum() *PurchaseType {
	p := new(PurchaseType)
	*p = x
	return p
}

func (x PurchaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PurchaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes[0].Descriptor()
}

func (PurchaseType) Type() protoreflect.EnumType {
	return &file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes[0]
}

func (x PurchaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PurchaseType.Descriptor instead.
func (PurchaseType) EnumDescriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{0}
}

type AcquiringChannel int32

const (
	AcquiringChannel_ECOMMERCE AcquiringChannel = 0
	AcquiringChannel_IN_STORE  AcquiringChannel = 1
	AcquiringChannel_TELESALES AcquiringChannel = 2
)

// Enum value maps for AcquiringChannel.
var (
	AcquiringChannel_name = map[int32]string{
		0: "ECOMMERCE",
		1: "IN_STORE",
		2: "TELESALES",
	}
	AcquiringChannel_value = map[string]int32{
		"ECOMMERCE": 0,
		"IN_STORE":  1,
		"TELESALES": 2,
	}
)

func (x AcquiringChannel) Enum() *AcquiringChannel {
	p := new(AcquiringChannel)
	*p = x
	return p
}

func (x AcquiringChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquiringChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes[1].Descriptor()
}

func (AcquiringChannel) Type() protoreflect.EnumType {
	return &file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes[1]
}

func (x AcquiringChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquiringChannel.Descriptor instead.
func (AcquiringChannel) EnumDescriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{1}
}

type ShippingMethod int32

const (
	ShippingMethod_Undefined       ShippingMethod = 0
	ShippingMethod_PickUpStore     ShippingMethod = 1
	ShippingMethod_Home            ShippingMethod = 2
	ShippingMethod_BoxReg          ShippingMethod = 3
	ShippingMethod_BoxUnreg        ShippingMethod = 4
	ShippingMethod_PickUpPoint     ShippingMethod = 5
	ShippingMethod_Own             ShippingMethod = 6
	ShippingMethod_Postal          ShippingMethod = 7
	ShippingMethod_DHLPackstation  ShippingMethod = 8
	ShippingMethod_Digital         ShippingMethod = 9
	ShippingMethod_PickUpWarehouse ShippingMethod = 10
	ShippingMethod_ClickCollect    ShippingMethod = 11
	ShippingMethod_PalletDelivery  ShippingMethod = 12
)

// Enum value maps for ShippingMethod.
var (
	ShippingMethod_name = map[int32]string{
		0:  "Undefined",
		1:  "PickUpStore",
		2:  "Home",
		3:  "BoxReg",
		4:  "BoxUnreg",
		5:  "PickUpPoint",
		6:  "Own",
		7:  "Postal",
		8:  "DHLPackstation",
		9:  "Digital",
		10: "PickUpWarehouse",
		11: "ClickCollect",
		12: "PalletDelivery",
	}
	ShippingMethod_value = map[string]int32{
		"Undefined":       0,
		"PickUpStore":     1,
		"Home":            2,
		"BoxReg":          3,
		"BoxUnreg":        4,
		"PickUpPoint":     5,
		"Own":             6,
		"Postal":          7,
		"DHLPackstation":  8,
		"Digital":         9,
		"PickUpWarehouse": 10,
		"ClickCollect":    11,
		"PalletDelivery":  12,
	}
)

func (x ShippingMethod) Enum() *ShippingMethod {
	p := new(ShippingMethod)
	*p = x
	return p
}

func (x ShippingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShippingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes[2].Descriptor()
}

func (ShippingMethod) Type() protoreflect.EnumType {
	return &file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes[2]
}

func (x ShippingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShippingMethod.Descriptor instead.
func (ShippingMethod) EnumDescriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{2}
}

type AuthorizeRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// B2C or B2B
	Customer       *Customer     `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	BillingAddress *Address      `protobuf:"bytes,2,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	OrderDetails   *OrderDetails `protobuf:"bytes,3,opt,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	// The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement. Available values: "ECOMMERCE" "IN_STORE" "TELESALES". ECOMMERCE is default.
	AcquiringChannel AcquiringChannel `protobuf:"varint,4,opt,name=acquiring_channel,json=acquiringChannel,proto3,enum=relay.processing.v1.paymentmethods.klarna.AcquiringChannel" json:"acquiring_channel,omitempty"`
	// Used to define the language and region of the customer. The locale follows the format of RFC 1766, meaning language-country. Regex: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
	Locale          string                          `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	PaymentFlowData *PaymentFlowRedirectRequestData `protobuf:"bytes,100,opt,name=payment_flow_data,json=paymentFlowData,proto3" json:"payment_flow_data,omitempty"`
}

func (x *AuthorizeRequestData) Reset() {
	*x = AuthorizeRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequestData) ProtoMessage() {}

func (x *AuthorizeRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequestData.ProtoReflect.Descriptor instead.
func (*AuthorizeRequestData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizeRequestData) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *AuthorizeRequestData) GetBillingAddress() *Address {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *AuthorizeRequestData) GetOrderDetails() *OrderDetails {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *AuthorizeRequestData) GetAcquiringChannel() AcquiringChannel {
	if x != nil {
		return x.AcquiringChannel
	}
	return AcquiringChannel_ECOMMERCE
}

func (x *AuthorizeRequestData) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *AuthorizeRequestData) GetPaymentFlowData() *PaymentFlowRedirectRequestData {
	if x != nil {
		return x.PaymentFlowData
	}
	return nil
}

type AuthorizeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentFlowData *PaymentFlowRedirectResponseData `protobuf:"bytes,1,opt,name=payment_flow_data,json=paymentFlowData,proto3" json:"payment_flow_data,omitempty"`
	// Session expiration time. 48 hours
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *AuthorizeResponseData) Reset() {
	*x = AuthorizeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResponseData) ProtoMessage() {}

func (x *AuthorizeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResponseData.ProtoReflect.Descriptor instead.
func (*AuthorizeResponseData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{1}
}

func (x *AuthorizeResponseData) GetPaymentFlowData() *PaymentFlowRedirectResponseData {
	if x != nil {
		return x.PaymentFlowData
	}
	return nil
}

func (x *AuthorizeResponseData) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type ChargeRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// B2C or B2B
	Customer       *Customer     `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	BillingAddress *Address      `protobuf:"bytes,2,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	OrderDetails   *OrderDetails `protobuf:"bytes,3,opt,name=order_details,json=orderDetails,proto3" json:"order_details,omitempty"`
	// The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement. Available values: "ECOMMERCE" "IN_STORE" "TELESALES". ECOMMERCE is default.
	AcquiringChannel AcquiringChannel `protobuf:"varint,4,opt,name=acquiring_channel,json=acquiringChannel,proto3,enum=relay.processing.v1.paymentmethods.klarna.AcquiringChannel" json:"acquiring_channel,omitempty"`
	// Used to define the language and region of the customer. The locale follows the format of RFC 1766, meaning language-country. Regex: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
	Locale          string                          `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	PaymentFlowData *PaymentFlowRedirectRequestData `protobuf:"bytes,100,opt,name=payment_flow_data,json=paymentFlowData,proto3" json:"payment_flow_data,omitempty"`
}

func (x *ChargeRequestData) Reset() {
	*x = ChargeRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeRequestData) ProtoMessage() {}

func (x *ChargeRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeRequestData.ProtoReflect.Descriptor instead.
func (*ChargeRequestData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{2}
}

func (x *ChargeRequestData) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *ChargeRequestData) GetBillingAddress() *Address {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *ChargeRequestData) GetOrderDetails() *OrderDetails {
	if x != nil {
		return x.OrderDetails
	}
	return nil
}

func (x *ChargeRequestData) GetAcquiringChannel() AcquiringChannel {
	if x != nil {
		return x.AcquiringChannel
	}
	return AcquiringChannel_ECOMMERCE
}

func (x *ChargeRequestData) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ChargeRequestData) GetPaymentFlowData() *PaymentFlowRedirectRequestData {
	if x != nil {
		return x.PaymentFlowData
	}
	return nil
}

type ChargeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentFlowData *PaymentFlowRedirectResponseData `protobuf:"bytes,1,opt,name=payment_flow_data,json=paymentFlowData,proto3" json:"payment_flow_data,omitempty"`
	// Session expiration time. 48 hours
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *ChargeResponseData) Reset() {
	*x = ChargeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeResponseData) ProtoMessage() {}

func (x *ChargeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeResponseData.ProtoReflect.Descriptor instead.
func (*ChargeResponseData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{3}
}

func (x *ChargeResponseData) GetPaymentFlowData() *PaymentFlowRedirectResponseData {
	if x != nil {
		return x.PaymentFlowData
	}
	return nil
}

func (x *ChargeResponseData) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type CaptureRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order lines for this capture. Maximum 1000 items.
	OrderItems []*OrderItem `protobuf:"bytes,1,rep,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`
	// To be clarified. Description of the capture shown to the customer. Max length is 255 characters.
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Shipping information for this capture. Maximum 500 items.
	ShippingInfo []*ShippingInfo `protobuf:"bytes,3,rep,name=shipping_info,json=shippingInfo,proto3" json:"shipping_info,omitempty"`
}

func (x *CaptureRequestData) Reset() {
	*x = CaptureRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureRequestData) ProtoMessage() {}

func (x *CaptureRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureRequestData.ProtoReflect.Descriptor instead.
func (*CaptureRequestData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureRequestData) GetOrderItems() []*OrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

func (x *CaptureRequestData) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CaptureRequestData) GetShippingInfo() []*ShippingInfo {
	if x != nil {
		return x.ShippingInfo
	}
	return nil
}

type ShippingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the shipping company for the return shipment (as specific as possible). Maximum 100 characters. Example: 'DHL US' and not only 'DHL'
	ReturnShippingCompany *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=return_shipping_company,json=returnShippingCompany,proto3" json:"return_shipping_company,omitempty"`
	// Tracking number for the return shipment. Maximum 100 characters.
	ReturnTrackingNumber *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=return_tracking_number,json=returnTrackingNumber,proto3" json:"return_tracking_number,omitempty"`
	// URL where the customer can track the return shipment. Maximum 1024 characters.
	ReturnTrackingUri *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=return_tracking_uri,json=returnTrackingUri,proto3" json:"return_tracking_uri,omitempty"`
	// Name of the shipping company (as specific as possible). Maximum 100 characters. Example: 'DHL US' and not only 'DHL'
	ShippingCompany *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=shipping_company,json=shippingCompany,proto3" json:"shipping_company,omitempty"`
	// Shipping method. Allowed values matches (PickUpStore|Home|BoxReg|BoxUnreg|PickUpPoint|Own|Postal|DHLPackstation|Digital|Undefined|PickUpWarehouse|ClickCollect|PalletDelivery)
	ShippingMethod ShippingMethod `protobuf:"varint,5,opt,name=shipping_method,json=shippingMethod,proto3,enum=relay.processing.v1.paymentmethods.klarna.ShippingMethod" json:"shipping_method,omitempty"`
	// Tracking number for the shipment. Maximum 100 characters.
	TrackingNumber *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
	// URI where the customer can track their shipment. Maximum 1024 characters.
	TrackingUri *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=tracking_uri,json=trackingUri,proto3" json:"tracking_uri,omitempty"`
}

func (x *ShippingInfo) Reset() {
	*x = ShippingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingInfo) ProtoMessage() {}

func (x *ShippingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingInfo.ProtoReflect.Descriptor instead.
func (*ShippingInfo) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{5}
}

func (x *ShippingInfo) GetReturnShippingCompany() *wrapperspb.StringValue {
	if x != nil {
		return x.ReturnShippingCompany
	}
	return nil
}

func (x *ShippingInfo) GetReturnTrackingNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.ReturnTrackingNumber
	}
	return nil
}

func (x *ShippingInfo) GetReturnTrackingUri() *wrapperspb.StringValue {
	if x != nil {
		return x.ReturnTrackingUri
	}
	return nil
}

func (x *ShippingInfo) GetShippingCompany() *wrapperspb.StringValue {
	if x != nil {
		return x.ShippingCompany
	}
	return nil
}

func (x *ShippingInfo) GetShippingMethod() ShippingMethod {
	if x != nil {
		return x.ShippingMethod
	}
	return ShippingMethod_Undefined
}

func (x *ShippingInfo) GetTrackingNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.TrackingNumber
	}
	return nil
}

func (x *ShippingInfo) GetTrackingUri() *wrapperspb.StringValue {
	if x != nil {
		return x.TrackingUri
	}
	return nil
}

type RefundRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order lines for this refund. Maximum 1000 items.
	OrderItems []*OrderItem `protobuf:"bytes,1,rep,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`
	// To be clarified. Description of the refund shown to the customer. Max length is 255 characters.
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RefundRequestData) Reset() {
	*x = RefundRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundRequestData) ProtoMessage() {}

func (x *RefundRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundRequestData.ProtoReflect.Descriptor instead.
func (*RefundRequestData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{6}
}

func (x *RefundRequestData) GetOrderItems() []*OrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

func (x *RefundRequestData) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// B2C
	Consumer *Consumer `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// B2B
	Bussiness *Bussiness `protobuf:"bytes,2,opt,name=bussiness,proto3" json:"bussiness,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{7}
}

func (x *Customer) GetConsumer() *Consumer {
	if x != nil {
		return x.Consumer
	}
	return nil
}

func (x *Customer) GetBussiness() *Bussiness {
	if x != nil {
		return x.Bussiness
	}
	return nil
}

type Consumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Customer’s date of birth. Format: yyyy-mm-dd
	DateOfBirth *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// Customer’s gender - ‘male’ or ‘female’
	Gender *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	// Last four digits of the customer's social security number. This value is available for US customers
	LastFourSsn *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=last_four_ssn,json=lastFourSsn,proto3" json:"last_four_ssn,omitempty"`
	// The customer's national identification number. This value is available for EU customers utilizing national identification numbers
	NationalIdentificationNumber *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=national_identification_number,json=nationalIdentificationNumber,proto3" json:"national_identification_number,omitempty"`
	// Customer’s Title. Allowed values per country: UK - "Mr", "Ms" DE - "Herr", "Frau" AT: "Herr, "Frau" CH: de-CH: "Herr, "Frau" it-CH: "Sig.", "Sig.ra" fr-CH: "M", "Mme" BE: "Dhr.", "Mevr." NL: "Dhr.", "Mevr."
	Title *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{8}
}

func (x *Consumer) GetDateOfBirth() *wrapperspb.StringValue {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *Consumer) GetGender() *wrapperspb.StringValue {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *Consumer) GetLastFourSsn() *wrapperspb.StringValue {
	if x != nil {
		return x.LastFourSsn
	}
	return nil
}

func (x *Consumer) GetNationalIdentificationNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.NationalIdentificationNumber
	}
	return nil
}

func (x *Consumer) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

type Bussiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organization entity type. Available values: "LIMITED_COMPANY" "PUBLIC_LIMITED_COMPANY" "ENTREPRENEURIAL_COMPANY" "LIMITED_PARTNERSHIP_LIMITED_COMPANY" "LIMITED_PARTNERSHIP" "GENERAL_PARTNERSHIP" "REGISTERED_SOLE_TRADER" "SOLE_TRADER" "CIVIL_LAW_PARTNERSHIP" "PUBLIC_INSTITUTION" "OTHER"
	OrganizationEntityType *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=organization_entity_type,json=organizationEntityType,proto3" json:"organization_entity_type,omitempty"`
	// Organization registration id. Only applicable for B2B customers.
	OrganizationRegistrationId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=organization_registration_id,json=organizationRegistrationId,proto3" json:"organization_registration_id,omitempty"`
	// VAT ID. Only applicable for B2B customers.
	VatId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vat_id,json=vatId,proto3" json:"vat_id,omitempty"`
}

func (x *Bussiness) Reset() {
	*x = Bussiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bussiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bussiness) ProtoMessage() {}

func (x *Bussiness) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bussiness.ProtoReflect.Descriptor instead.
func (*Bussiness) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{9}
}

func (x *Bussiness) GetOrganizationEntityType() *wrapperspb.StringValue {
	if x != nil {
		return x.OrganizationEntityType
	}
	return nil
}

func (x *Bussiness) GetOrganizationRegistrationId() *wrapperspb.StringValue {
	if x != nil {
		return x.OrganizationRegistrationId
	}
	return nil
}

func (x *Bussiness) GetVatId() *wrapperspb.StringValue {
	if x != nil {
		return x.VatId
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ‘Attn.’ (if applicable). Only applicable for B2B customers. [ 0 .. 99 ] characters
	Attention *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=attention,proto3" json:"attention,omitempty"`
	// Customer’s city. [ 0 .. 99 ] characters
	City *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	// Customer’s country. This value overrides the purchase country if they are different. ISO 3166-1 alpha-3, e.g. NOR, SWE, DNK
	CountryCode *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Customer’s email. [ 0 .. 99 ] characters
	EmailAddress *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// Customer’s family name. [ 0 .. 99 ] characters
	FamilyName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// Customer’s first name. [ 0 .. 99 ] characters
	GivenName *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// Organization name (if applicable). Only applicable for B2B customers. [ 0 .. 99 ] characters
	OrganizationName *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// Customer’s phone number. Preferably a mobile phone number. [ 5 .. 99 ] characters
	PhoneNumber *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Customer’s postal code. Validation according to Universal Postal Union addressing systems. E.g. 12345, W1G OPW. [ 0 .. 10 ] characters
	PostalCode *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// Customer’s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc. [ 0 .. 99 ] characters
	Region *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	// Customer’s street address. Regional formatting is required, as follows: UK/US/FR: 33 Cavendish Square Rest of EU: De Ruijterkade 7. [ 0 .. 99 ] characters
	StreetAddress *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	// Customer’s street address. Second Line. [ 0 .. 99 ] characters
	StreetAddress2 *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=street_address2,json=streetAddress2,proto3" json:"street_address2,omitempty"`
	// Customer’s Title. Allowed values per country: UK - "Mr", "Ms" DE - "Herr", "Frau" AT: "Herr, "Frau" CH: de-CH: "Herr, "Frau" it-CH: "Sig.", "Sig.ra" fr-CH: "M", "Mme" BE: "Dhr.", "Mevr." NL: "Dhr.", "Mevr." [ 0 .. 20 ] characters
	Title *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{10}
}

func (x *Address) GetAttention() *wrapperspb.StringValue {
	if x != nil {
		return x.Attention
	}
	return nil
}

func (x *Address) GetCity() *wrapperspb.StringValue {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *Address) GetCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *Address) GetEmailAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.EmailAddress
	}
	return nil
}

func (x *Address) GetFamilyName() *wrapperspb.StringValue {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *Address) GetGivenName() *wrapperspb.StringValue {
	if x != nil {
		return x.GivenName
	}
	return nil
}

func (x *Address) GetOrganizationName() *wrapperspb.StringValue {
	if x != nil {
		return x.OrganizationName
	}
	return nil
}

func (x *Address) GetPhoneNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *Address) GetPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *Address) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Address) GetStreetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.StreetAddress
	}
	return nil
}

func (x *Address) GetStreetAddress2() *wrapperspb.StringValue {
	if x != nil {
		return x.StreetAddress2
	}
	return nil
}

func (x *Address) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

type OrderDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderItems []*OrderItem `protobuf:"bytes,1,rep,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`
	// Format: ISO 3166-1 alpha-3, e.g. NOR, SWE, DNK
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Shipping address.
	ShippingAddress *Address `protobuf:"bytes,3,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
}

func (x *OrderDetails) Reset() {
	*x = OrderDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetails) ProtoMessage() {}

func (x *OrderDetails) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetails.ProtoReflect.Descriptor instead.
func (*OrderDetails) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{11}
}

func (x *OrderDetails) GetOrderItems() []*OrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

func (x *OrderDetails) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *OrderDetails) GetShippingAddress() *Address {
	if x != nil {
		return x.ShippingAddress
	}
	return nil
}

type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters). A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB. [0 .. 1024] characters.
	ImageUrl *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Used for storing merchant's internal order number or other reference. Pass through field.
	MerchantData *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=merchant_data,json=merchantData,proto3" json:"merchant_data,omitempty"`
	// Descriptive name of the order item. [1 .. 255] characters. Required.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional field.
	ProductIdentifier *ProductIdentifier `protobuf:"bytes,4,opt,name=product_identifier,json=productIdentifier,proto3" json:"product_identifier,omitempty"`
	// URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. [0 .. 1024] characters.
	ProductUrl *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
	// Quantity of the order line item. Must be a non-negative number. >=0
	Quantity int64 `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Unit used to describe the quantity, e.g. kg, pcs, etc. [1 .. 8] characters.
	QuantityUnit string `protobuf:"bytes,7,opt,name=quantity_unit,json=quantityUnit,proto3" json:"quantity_unit,omitempty"`
	// Client facing article number, SKU or similar. [0 .. 256] characters.
	Reference *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reference,proto3" json:"reference,omitempty"`
	// Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%. [0 .. 10000]
	TaxRate int64 `protobuf:"varint,9,opt,name=tax_rate,json=taxRate,proto3" json:"tax_rate,omitempty"`
	// Non-negative minor units. Includes tax. Eg: 500=5 euros.
	TotalDiscountAmount int64 `protobuf:"varint,10,opt,name=total_discount_amount,json=totalDiscountAmount,proto3" json:"total_discount_amount,omitempty"`
	// Total tax amount of the order line. Must be within ±1 of total_amount - (total_amount * (10000 / (10000 + tax_rate)). Negative when type is discount.
	TotalTaxAmount int64 `protobuf:"varint,11,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	// UnitPrice. Price for a single unit of the order line. Non-negative minor units. Includes tax, excludes discount. [ 0 .. 100000000 ].
	UnitPrice int64 `protobuf:"varint,12,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Total amount of the order line. Must be defined as non-negative minor units. Includes tax and discount. Eg: 2500=25 euros Value = (quantity * unit_price) - total_discount_amount. [ 0 .. 100000000 ]. Required.
	TotalAmount int64 `protobuf:"varint,13,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{12}
}

func (x *OrderItem) GetImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

func (x *OrderItem) GetMerchantData() *wrapperspb.StringValue {
	if x != nil {
		return x.MerchantData
	}
	return nil
}

func (x *OrderItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrderItem) GetProductIdentifier() *ProductIdentifier {
	if x != nil {
		return x.ProductIdentifier
	}
	return nil
}

func (x *OrderItem) GetProductUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProductUrl
	}
	return nil
}

func (x *OrderItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderItem) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *OrderItem) GetReference() *wrapperspb.StringValue {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *OrderItem) GetTaxRate() int64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *OrderItem) GetTotalDiscountAmount() int64 {
	if x != nil {
		return x.TotalDiscountAmount
	}
	return 0
}

func (x *OrderItem) GetTotalTaxAmount() int64 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *OrderItem) GetUnitPrice() int64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *OrderItem) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type ProductIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The product's brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value. [0 .. 70] characters.
	Brand *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	// The product's category path as used in the merchant's webshop. Include the full and most detailed category and separate the segments with ' > '. [0 .. 750] characters.
	CategoryPath *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=category_path,json=categoryPath,proto3" json:"category_path,omitempty"`
	// The product's Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible. [0 .. 50] characters.
	GlobalTradeItemNumber *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=global_trade_item_number,json=globalTradeItemNumber,proto3" json:"global_trade_item_number,omitempty"`
	// The product's Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible. [0 .. 70] characters.
	ManufacturerPartNumber *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=manufacturer_part_number,json=manufacturerPartNumber,proto3" json:"manufacturer_part_number,omitempty"`
	// Color to be shown to the end customer. [0 .. 64] characters.
	Color *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	// Size to be shown to the end customer. [0 .. 64] characters.
	Size *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ProductIdentifier) Reset() {
	*x = ProductIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductIdentifier) ProtoMessage() {}

func (x *ProductIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductIdentifier.ProtoReflect.Descriptor instead.
func (*ProductIdentifier) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{13}
}

func (x *ProductIdentifier) GetBrand() *wrapperspb.StringValue {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *ProductIdentifier) GetCategoryPath() *wrapperspb.StringValue {
	if x != nil {
		return x.CategoryPath
	}
	return nil
}

func (x *ProductIdentifier) GetGlobalTradeItemNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.GlobalTradeItemNumber
	}
	return nil
}

func (x *ProductIdentifier) GetManufacturerPartNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.ManufacturerPartNumber
	}
	return nil
}

func (x *ProductIdentifier) GetColor() *wrapperspb.StringValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProductIdentifier) GetSize() *wrapperspb.StringValue {
	if x != nil {
		return x.Size
	}
	return nil
}

type PaymentFlowRedirectRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Back URL
	BackUrl string `protobuf:"bytes,1,opt,name=back_url,json=backUrl,proto3" json:"back_url,omitempty"`
	// Cancel URL
	CancelUrl string `protobuf:"bytes,2,opt,name=cancel_url,json=cancelUrl,proto3" json:"cancel_url,omitempty"`
	// Failure or System error URL
	FailedUrl string `protobuf:"bytes,3,opt,name=failed_url,json=failedUrl,proto3" json:"failed_url,omitempty"`
	// Success URL
	SuccessUrl string `protobuf:"bytes,4,opt,name=success_url,json=successUrl,proto3" json:"success_url,omitempty"`
	// URL of the logo to be displayed. Optional.
	LogoUrl *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	// Title for the Payment Page. Optional.
	PageTitle *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
	// The type of this purchase
	PurchaseType PurchaseType `protobuf:"varint,7,opt,name=purchase_type,json=purchaseType,proto3,enum=relay.processing.v1.paymentmethods.klarna.PurchaseType" json:"purchase_type,omitempty"`
}

func (x *PaymentFlowRedirectRequestData) Reset() {
	*x = PaymentFlowRedirectRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFlowRedirectRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFlowRedirectRequestData) ProtoMessage() {}

func (x *PaymentFlowRedirectRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFlowRedirectRequestData.ProtoReflect.Descriptor instead.
func (*PaymentFlowRedirectRequestData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{14}
}

func (x *PaymentFlowRedirectRequestData) GetBackUrl() string {
	if x != nil {
		return x.BackUrl
	}
	return ""
}

func (x *PaymentFlowRedirectRequestData) GetCancelUrl() string {
	if x != nil {
		return x.CancelUrl
	}
	return ""
}

func (x *PaymentFlowRedirectRequestData) GetFailedUrl() string {
	if x != nil {
		return x.FailedUrl
	}
	return ""
}

func (x *PaymentFlowRedirectRequestData) GetSuccessUrl() string {
	if x != nil {
		return x.SuccessUrl
	}
	return ""
}

func (x *PaymentFlowRedirectRequestData) GetLogoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.LogoUrl
	}
	return nil
}

func (x *PaymentFlowRedirectRequestData) GetPageTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.PageTitle
	}
	return nil
}

func (x *PaymentFlowRedirectRequestData) GetPurchaseType() PurchaseType {
	if x != nil {
		return x.PurchaseType
	}
	return PurchaseType_BUY
}

type PaymentFlowRedirectResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovalUrl string `protobuf:"bytes,1,opt,name=approval_url,json=approvalUrl,proto3" json:"approval_url,omitempty"`
}

func (x *PaymentFlowRedirectResponseData) Reset() {
	*x = PaymentFlowRedirectResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentFlowRedirectResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentFlowRedirectResponseData) ProtoMessage() {}

func (x *PaymentFlowRedirectResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentFlowRedirectResponseData.ProtoReflect.Descriptor instead.
func (*PaymentFlowRedirectResponseData) Descriptor() ([]byte, []int) {
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{15}
}

func (x *PaymentFlowRedirectResponseData) GetApprovalUrl() string {
	if x != nil {
		return x.ApprovalUrl
	}
	return ""
}

var File_relay_processing_v1_paymentmethods_klarna_proto protoreflect.FileDescriptor

var file_relay_processing_v1_paymentmethods_klarna_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x2f, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x29, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x04,
	0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c,
	0x61, 0x72, 0x6e, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x75, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x76, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x98, 0x04, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c,
	0x61, 0x72, 0x6e, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e,
	0x61, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x75, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61,
	0x72, 0x6e, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x76, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e,
	0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x89, 0x02,
	0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b,
	0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0d, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbb, 0x04, 0x0a, 0x0c, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x17, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x52, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x72, 0x69, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x62, 0x0a, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x45, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x69, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x12, 0x52, 0x0a, 0x09, 0x62, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e,
	0x61, 0x2e, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09, 0x62, 0x75, 0x73,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x53, 0x73, 0x6e, 0x12, 0x62, 0x0a,
	0x1e, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x73, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x1c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x76,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x74, 0x49, 0x64,
	0x22, 0xb8, 0x06, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d,
	0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x45, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x81, 0x05, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x41,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x18, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x1e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x5c,
	0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e,
	0x61, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x1f,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x2a, 0x61, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x55, 0x45, 0x10, 0x06, 0x2a, 0x3e, 0x0a, 0x10, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x41,
	0x4c, 0x45, 0x53, 0x10, 0x02, 0x2a, 0xd6, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x69, 0x63, 0x6b, 0x55,
	0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x6d, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x67, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x42, 0x6f, 0x78, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x77, 0x6e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x48, 0x4c, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x10, 0x0c, 0x42, 0x76,
	0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x64,
	0x76, 0x65, 0x64, 0x37, 0x35, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0xaa, 0x02, 0x29, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e,
	0x4b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relay_processing_v1_paymentmethods_klarna_proto_rawDescOnce sync.Once
	file_relay_processing_v1_paymentmethods_klarna_proto_rawDescData = file_relay_processing_v1_paymentmethods_klarna_proto_rawDesc
)

func file_relay_processing_v1_paymentmethods_klarna_proto_rawDescGZIP() []byte {
	file_relay_processing_v1_paymentmethods_klarna_proto_rawDescOnce.Do(func() {
		file_relay_processing_v1_paymentmethods_klarna_proto_rawDescData = protoimpl.X.CompressGZIP(file_relay_processing_v1_paymentmethods_klarna_proto_rawDescData)
	})
	return file_relay_processing_v1_paymentmethods_klarna_proto_rawDescData
}

var file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_relay_processing_v1_paymentmethods_klarna_proto_goTypes = []interface{}{
	(PurchaseType)(0),                       // 0: relay.processing.v1.paymentmethods.klarna.PurchaseType
	(AcquiringChannel)(0),                   // 1: relay.processing.v1.paymentmethods.klarna.AcquiringChannel
	(ShippingMethod)(0),                     // 2: relay.processing.v1.paymentmethods.klarna.ShippingMethod
	(*AuthorizeRequestData)(nil),            // 3: relay.processing.v1.paymentmethods.klarna.AuthorizeRequestData
	(*AuthorizeResponseData)(nil),           // 4: relay.processing.v1.paymentmethods.klarna.AuthorizeResponseData
	(*ChargeRequestData)(nil),               // 5: relay.processing.v1.paymentmethods.klarna.ChargeRequestData
	(*ChargeResponseData)(nil),              // 6: relay.processing.v1.paymentmethods.klarna.ChargeResponseData
	(*CaptureRequestData)(nil),              // 7: relay.processing.v1.paymentmethods.klarna.CaptureRequestData
	(*ShippingInfo)(nil),                    // 8: relay.processing.v1.paymentmethods.klarna.ShippingInfo
	(*RefundRequestData)(nil),               // 9: relay.processing.v1.paymentmethods.klarna.RefundRequestData
	(*Customer)(nil),                        // 10: relay.processing.v1.paymentmethods.klarna.Customer
	(*Consumer)(nil),                        // 11: relay.processing.v1.paymentmethods.klarna.Consumer
	(*Bussiness)(nil),                       // 12: relay.processing.v1.paymentmethods.klarna.Bussiness
	(*Address)(nil),                         // 13: relay.processing.v1.paymentmethods.klarna.Address
	(*OrderDetails)(nil),                    // 14: relay.processing.v1.paymentmethods.klarna.OrderDetails
	(*OrderItem)(nil),                       // 15: relay.processing.v1.paymentmethods.klarna.OrderItem
	(*ProductIdentifier)(nil),               // 16: relay.processing.v1.paymentmethods.klarna.ProductIdentifier
	(*PaymentFlowRedirectRequestData)(nil),  // 17: relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectRequestData
	(*PaymentFlowRedirectResponseData)(nil), // 18: relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectResponseData
	(*timestamppb.Timestamp)(nil),           // 19: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),          // 20: google.protobuf.StringValue
}
var file_relay_processing_v1_paymentmethods_klarna_proto_depIdxs = []int32{
	10, // 0: relay.processing.v1.paymentmethods.klarna.AuthorizeRequestData.customer:type_name -> relay.processing.v1.paymentmethods.klarna.Customer
	13, // 1: relay.processing.v1.paymentmethods.klarna.AuthorizeRequestData.billing_address:type_name -> relay.processing.v1.paymentmethods.klarna.Address
	14, // 2: relay.processing.v1.paymentmethods.klarna.AuthorizeRequestData.order_details:type_name -> relay.processing.v1.paymentmethods.klarna.OrderDetails
	1,  // 3: relay.processing.v1.paymentmethods.klarna.AuthorizeRequestData.acquiring_channel:type_name -> relay.processing.v1.paymentmethods.klarna.AcquiringChannel
	17, // 4: relay.processing.v1.paymentmethods.klarna.AuthorizeRequestData.payment_flow_data:type_name -> relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectRequestData
	18, // 5: relay.processing.v1.paymentmethods.klarna.AuthorizeResponseData.payment_flow_data:type_name -> relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectResponseData
	19, // 6: relay.processing.v1.paymentmethods.klarna.AuthorizeResponseData.expires_at:type_name -> google.protobuf.Timestamp
	10, // 7: relay.processing.v1.paymentmethods.klarna.ChargeRequestData.customer:type_name -> relay.processing.v1.paymentmethods.klarna.Customer
	13, // 8: relay.processing.v1.paymentmethods.klarna.ChargeRequestData.billing_address:type_name -> relay.processing.v1.paymentmethods.klarna.Address
	14, // 9: relay.processing.v1.paymentmethods.klarna.ChargeRequestData.order_details:type_name -> relay.processing.v1.paymentmethods.klarna.OrderDetails
	1,  // 10: relay.processing.v1.paymentmethods.klarna.ChargeRequestData.acquiring_channel:type_name -> relay.processing.v1.paymentmethods.klarna.AcquiringChannel
	17, // 11: relay.processing.v1.paymentmethods.klarna.ChargeRequestData.payment_flow_data:type_name -> relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectRequestData
	18, // 12: relay.processing.v1.paymentmethods.klarna.ChargeResponseData.payment_flow_data:type_name -> relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectResponseData
	19, // 13: relay.processing.v1.paymentmethods.klarna.ChargeResponseData.expires_at:type_name -> google.protobuf.Timestamp
	15, // 14: relay.processing.v1.paymentmethods.klarna.CaptureRequestData.order_items:type_name -> relay.processing.v1.paymentmethods.klarna.OrderItem
	20, // 15: relay.processing.v1.paymentmethods.klarna.CaptureRequestData.description:type_name -> google.protobuf.StringValue
	8,  // 16: relay.processing.v1.paymentmethods.klarna.CaptureRequestData.shipping_info:type_name -> relay.processing.v1.paymentmethods.klarna.ShippingInfo
	20, // 17: relay.processing.v1.paymentmethods.klarna.ShippingInfo.return_shipping_company:type_name -> google.protobuf.StringValue
	20, // 18: relay.processing.v1.paymentmethods.klarna.ShippingInfo.return_tracking_number:type_name -> google.protobuf.StringValue
	20, // 19: relay.processing.v1.paymentmethods.klarna.ShippingInfo.return_tracking_uri:type_name -> google.protobuf.StringValue
	20, // 20: relay.processing.v1.paymentmethods.klarna.ShippingInfo.shipping_company:type_name -> google.protobuf.StringValue
	2,  // 21: relay.processing.v1.paymentmethods.klarna.ShippingInfo.shipping_method:type_name -> relay.processing.v1.paymentmethods.klarna.ShippingMethod
	20, // 22: relay.processing.v1.paymentmethods.klarna.ShippingInfo.tracking_number:type_name -> google.protobuf.StringValue
	20, // 23: relay.processing.v1.paymentmethods.klarna.ShippingInfo.tracking_uri:type_name -> google.protobuf.StringValue
	15, // 24: relay.processing.v1.paymentmethods.klarna.RefundRequestData.order_items:type_name -> relay.processing.v1.paymentmethods.klarna.OrderItem
	20, // 25: relay.processing.v1.paymentmethods.klarna.RefundRequestData.description:type_name -> google.protobuf.StringValue
	11, // 26: relay.processing.v1.paymentmethods.klarna.Customer.consumer:type_name -> relay.processing.v1.paymentmethods.klarna.Consumer
	12, // 27: relay.processing.v1.paymentmethods.klarna.Customer.bussiness:type_name -> relay.processing.v1.paymentmethods.klarna.Bussiness
	20, // 28: relay.processing.v1.paymentmethods.klarna.Consumer.date_of_birth:type_name -> google.protobuf.StringValue
	20, // 29: relay.processing.v1.paymentmethods.klarna.Consumer.gender:type_name -> google.protobuf.StringValue
	20, // 30: relay.processing.v1.paymentmethods.klarna.Consumer.last_four_ssn:type_name -> google.protobuf.StringValue
	20, // 31: relay.processing.v1.paymentmethods.klarna.Consumer.national_identification_number:type_name -> google.protobuf.StringValue
	20, // 32: relay.processing.v1.paymentmethods.klarna.Consumer.title:type_name -> google.protobuf.StringValue
	20, // 33: relay.processing.v1.paymentmethods.klarna.Bussiness.organization_entity_type:type_name -> google.protobuf.StringValue
	20, // 34: relay.processing.v1.paymentmethods.klarna.Bussiness.organization_registration_id:type_name -> google.protobuf.StringValue
	20, // 35: relay.processing.v1.paymentmethods.klarna.Bussiness.vat_id:type_name -> google.protobuf.StringValue
	20, // 36: relay.processing.v1.paymentmethods.klarna.Address.attention:type_name -> google.protobuf.StringValue
	20, // 37: relay.processing.v1.paymentmethods.klarna.Address.city:type_name -> google.protobuf.StringValue
	20, // 38: relay.processing.v1.paymentmethods.klarna.Address.country_code:type_name -> google.protobuf.StringValue
	20, // 39: relay.processing.v1.paymentmethods.klarna.Address.email_address:type_name -> google.protobuf.StringValue
	20, // 40: relay.processing.v1.paymentmethods.klarna.Address.family_name:type_name -> google.protobuf.StringValue
	20, // 41: relay.processing.v1.paymentmethods.klarna.Address.given_name:type_name -> google.protobuf.StringValue
	20, // 42: relay.processing.v1.paymentmethods.klarna.Address.organization_name:type_name -> google.protobuf.StringValue
	20, // 43: relay.processing.v1.paymentmethods.klarna.Address.phone_number:type_name -> google.protobuf.StringValue
	20, // 44: relay.processing.v1.paymentmethods.klarna.Address.postal_code:type_name -> google.protobuf.StringValue
	20, // 45: relay.processing.v1.paymentmethods.klarna.Address.region:type_name -> google.protobuf.StringValue
	20, // 46: relay.processing.v1.paymentmethods.klarna.Address.street_address:type_name -> google.protobuf.StringValue
	20, // 47: relay.processing.v1.paymentmethods.klarna.Address.street_address2:type_name -> google.protobuf.StringValue
	20, // 48: relay.processing.v1.paymentmethods.klarna.Address.title:type_name -> google.protobuf.StringValue
	15, // 49: relay.processing.v1.paymentmethods.klarna.OrderDetails.order_items:type_name -> relay.processing.v1.paymentmethods.klarna.OrderItem
	13, // 50: relay.processing.v1.paymentmethods.klarna.OrderDetails.shipping_address:type_name -> relay.processing.v1.paymentmethods.klarna.Address
	20, // 51: relay.processing.v1.paymentmethods.klarna.OrderItem.image_url:type_name -> google.protobuf.StringValue
	20, // 52: relay.processing.v1.paymentmethods.klarna.OrderItem.merchant_data:type_name -> google.protobuf.StringValue
	16, // 53: relay.processing.v1.paymentmethods.klarna.OrderItem.product_identifier:type_name -> relay.processing.v1.paymentmethods.klarna.ProductIdentifier
	20, // 54: relay.processing.v1.paymentmethods.klarna.OrderItem.product_url:type_name -> google.protobuf.StringValue
	20, // 55: relay.processing.v1.paymentmethods.klarna.OrderItem.reference:type_name -> google.protobuf.StringValue
	20, // 56: relay.processing.v1.paymentmethods.klarna.ProductIdentifier.brand:type_name -> google.protobuf.StringValue
	20, // 57: relay.processing.v1.paymentmethods.klarna.ProductIdentifier.category_path:type_name -> google.protobuf.StringValue
	20, // 58: relay.processing.v1.paymentmethods.klarna.ProductIdentifier.global_trade_item_number:type_name -> google.protobuf.StringValue
	20, // 59: relay.processing.v1.paymentmethods.klarna.ProductIdentifier.manufacturer_part_number:type_name -> google.protobuf.StringValue
	20, // 60: relay.processing.v1.paymentmethods.klarna.ProductIdentifier.color:type_name -> google.protobuf.StringValue
	20, // 61: relay.processing.v1.paymentmethods.klarna.ProductIdentifier.size:type_name -> google.protobuf.StringValue
	20, // 62: relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectRequestData.logo_url:type_name -> google.protobuf.StringValue
	20, // 63: relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectRequestData.page_title:type_name -> google.protobuf.StringValue
	0,  // 64: relay.processing.v1.paymentmethods.klarna.PaymentFlowRedirectRequestData.purchase_type:type_name -> relay.processing.v1.paymentmethods.klarna.PurchaseType
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_relay_processing_v1_paymentmethods_klarna_proto_init() }
func file_relay_processing_v1_paymentmethods_klarna_proto_init() {
	if File_relay_processing_v1_paymentmethods_klarna_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bussiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFlowRedirectRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentFlowRedirectResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relay_processing_v1_paymentmethods_klarna_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relay_processing_v1_paymentmethods_klarna_proto_goTypes,
		DependencyIndexes: file_relay_processing_v1_paymentmethods_klarna_proto_depIdxs,
		EnumInfos:         file_relay_processing_v1_paymentmethods_klarna_proto_enumTypes,
		MessageInfos:      file_relay_processing_v1_paymentmethods_klarna_proto_msgTypes,
	}.Build()
	File_relay_processing_v1_paymentmethods_klarna_proto = out.File
	file_relay_processing_v1_paymentmethods_klarna_proto_rawDesc = nil
	file_relay_processing_v1_paymentmethods_klarna_proto_goTypes = nil
	file_relay_processing_v1_paymentmethods_klarna_proto_depIdxs = nil
}
