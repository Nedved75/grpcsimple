// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: relay/onboarding/v1/paymentmethods/klarna.proto

package paymentmethods

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Category int32

const (
	Category_ADULT_SHOES_AND_CLOTHING                     Category = 0
	Category_AUTOMOTIVE_PARTS_AND_ACCESSORIES             Category = 1
	Category_BAGS_AND_WALLETS                             Category = 2
	Category_BODY_AND_HAIR_CARE                           Category = 3
	Category_BOOK_AND_MAGAZINES                           Category = 4
	Category_CANDY                                        Category = 5
	Category_CAR_ELECTRONICS                              Category = 6
	Category_CHILDREN_CLOTHES_AND_NURTURING_PRODUCTS      Category = 7
	Category_CHILDREN_TOYS                                Category = 8
	Category_CLEANING_AND_SANITARY                        Category = 9
	Category_COLLECTIBLES                                 Category = 10
	Category_CONCEPT_STORES_AND_MISCELLANEOUS             Category = 11
	Category_COSMETICS                                    Category = 12
	Category_COSTUMES_AND_PARTY_SUPPLIES                  Category = 13
	Category_DATING_SERVICES                              Category = 14
	Category_DECORATION_AND_ART                           Category = 15
	Category_DIETARY_SUPPLEMENTS                          Category = 16
	Category_DIGITAL_SERVICES                             Category = 17
	Category_DIVERSIFIED_CHILDREN_PRODUCTS                Category = 18
	Category_DIVERSIFIED_ELECTRONICS                      Category = 19
	Category_DIVERSIFIED_ENTERTAINMENT                    Category = 20
	Category_DIVERSIFIED_EROTIC_MATERIAL                  Category = 21
	Category_DIVERSIFIED_HOME_AND_GARDEN_PRODUCTS         Category = 22
	Category_DIVERSIFIED_JEWELRY_AND_ACCESSORIES          Category = 23
	Category_DIVERSIFIED_HEALTH_AND_BEAUTY_PRODUCTS       Category = 24
	Category_DIVERSIFIES_HEALTH_AND_BEAUTY_PRODUCTS       Category = 25
	Category_EDUCATION                                    Category = 26
	Category_ELECTRONIC_EQUIPMENT_AND_RELATED_ACCESSORIES Category = 27
	Category_EROTIC_CLOTHING_AND_ACCESSORIES              Category = 28
	Category_EVENT_TICKETS                                Category = 29
	Category_FOOD_AND_BEVERAGE                            Category = 30
	Category_FRAGRANCES                                   Category = 31
	Category_FURNITURE                                    Category = 32
	Category_GENERAL_SHOES_AND_CLOTHING                   Category = 33
	Category_HOBBY_ARTICLES                               Category = 34
	Category_HOUSEHOLD_ELECTRONICS                        Category = 35
	Category_JEWELRY_AND_WATCHES                          Category = 36
	Category_KITCHENWARE                                  Category = 37
	Category_MARKETPLACES                                 Category = 38
	Category_MUSIC_AND_MOVIES                             Category = 39
	Category_MUSICAL_INSTRUMENTS_AND_EQUIPMENT            Category = 40
	Category_NON_PRESCRIPTION_SUNGLASSES_AND_LENSES       Category = 41
	Category_OFFICE_MACHINES_AND_RELATED_ACCESSORIES      Category = 42
	Category_OTHER_SERVICES                               Category = 43
	Category_PERSONAL_CARE_AND_BODY_IMPROVEMENT           Category = 44
	Category_PET_SUPPLIES                                 Category = 45
	Category_PHARMACEUTICAL_PRODUCTS                      Category = 46
	Category_PLANTS_AND_FLOWERS                           Category = 47
	Category_PRESCRIPTION_OPTICS                          Category = 48
	Category_PRINTS_AND_PHOTOS                            Category = 49
	Category_SAFETY_PRODUCTS                              Category = 50
	Category_SEX_TOYS                                     Category = 51
	Category_SPORTS_GEAR_AND_OUTDOOR                      Category = 52
	Category_TOBACCO                                      Category = 53
	Category_TOOLS_AND_HOME_IMPROVEMENT                   Category = 54
	Category_TRAVEL_SERVICES                              Category = 55
	Category_UNDERWEAR                                    Category = 56
	Category_VIDEO_GAMES_AND_RELATED_ACCESSORIES          Category = 57
	Category_WHEELS_AND_TIRES                             Category = 58
	Category_WINE_BEER_AND_LIQUOR                         Category = 59
	Category_YOUTHFUL_SHOES_AND_CLOTHING                  Category = 60
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0:  "ADULT_SHOES_AND_CLOTHING",
		1:  "AUTOMOTIVE_PARTS_AND_ACCESSORIES",
		2:  "BAGS_AND_WALLETS",
		3:  "BODY_AND_HAIR_CARE",
		4:  "BOOK_AND_MAGAZINES",
		5:  "CANDY",
		6:  "CAR_ELECTRONICS",
		7:  "CHILDREN_CLOTHES_AND_NURTURING_PRODUCTS",
		8:  "CHILDREN_TOYS",
		9:  "CLEANING_AND_SANITARY",
		10: "COLLECTIBLES",
		11: "CONCEPT_STORES_AND_MISCELLANEOUS",
		12: "COSMETICS",
		13: "COSTUMES_AND_PARTY_SUPPLIES",
		14: "DATING_SERVICES",
		15: "DECORATION_AND_ART",
		16: "DIETARY_SUPPLEMENTS",
		17: "DIGITAL_SERVICES",
		18: "DIVERSIFIED_CHILDREN_PRODUCTS",
		19: "DIVERSIFIED_ELECTRONICS",
		20: "DIVERSIFIED_ENTERTAINMENT",
		21: "DIVERSIFIED_EROTIC_MATERIAL",
		22: "DIVERSIFIED_HOME_AND_GARDEN_PRODUCTS",
		23: "DIVERSIFIED_JEWELRY_AND_ACCESSORIES",
		24: "DIVERSIFIED_HEALTH_AND_BEAUTY_PRODUCTS",
		25: "DIVERSIFIES_HEALTH_AND_BEAUTY_PRODUCTS",
		26: "EDUCATION",
		27: "ELECTRONIC_EQUIPMENT_AND_RELATED_ACCESSORIES",
		28: "EROTIC_CLOTHING_AND_ACCESSORIES",
		29: "EVENT_TICKETS",
		30: "FOOD_AND_BEVERAGE",
		31: "FRAGRANCES",
		32: "FURNITURE",
		33: "GENERAL_SHOES_AND_CLOTHING",
		34: "HOBBY_ARTICLES",
		35: "HOUSEHOLD_ELECTRONICS",
		36: "JEWELRY_AND_WATCHES",
		37: "KITCHENWARE",
		38: "MARKETPLACES",
		39: "MUSIC_AND_MOVIES",
		40: "MUSICAL_INSTRUMENTS_AND_EQUIPMENT",
		41: "NON_PRESCRIPTION_SUNGLASSES_AND_LENSES",
		42: "OFFICE_MACHINES_AND_RELATED_ACCESSORIES",
		43: "OTHER_SERVICES",
		44: "PERSONAL_CARE_AND_BODY_IMPROVEMENT",
		45: "PET_SUPPLIES",
		46: "PHARMACEUTICAL_PRODUCTS",
		47: "PLANTS_AND_FLOWERS",
		48: "PRESCRIPTION_OPTICS",
		49: "PRINTS_AND_PHOTOS",
		50: "SAFETY_PRODUCTS",
		51: "SEX_TOYS",
		52: "SPORTS_GEAR_AND_OUTDOOR",
		53: "TOBACCO",
		54: "TOOLS_AND_HOME_IMPROVEMENT",
		55: "TRAVEL_SERVICES",
		56: "UNDERWEAR",
		57: "VIDEO_GAMES_AND_RELATED_ACCESSORIES",
		58: "WHEELS_AND_TIRES",
		59: "WINE_BEER_AND_LIQUOR",
		60: "YOUTHFUL_SHOES_AND_CLOTHING",
	}
	Category_value = map[string]int32{
		"ADULT_SHOES_AND_CLOTHING":                     0,
		"AUTOMOTIVE_PARTS_AND_ACCESSORIES":             1,
		"BAGS_AND_WALLETS":                             2,
		"BODY_AND_HAIR_CARE":                           3,
		"BOOK_AND_MAGAZINES":                           4,
		"CANDY":                                        5,
		"CAR_ELECTRONICS":                              6,
		"CHILDREN_CLOTHES_AND_NURTURING_PRODUCTS":      7,
		"CHILDREN_TOYS":                                8,
		"CLEANING_AND_SANITARY":                        9,
		"COLLECTIBLES":                                 10,
		"CONCEPT_STORES_AND_MISCELLANEOUS":             11,
		"COSMETICS":                                    12,
		"COSTUMES_AND_PARTY_SUPPLIES":                  13,
		"DATING_SERVICES":                              14,
		"DECORATION_AND_ART":                           15,
		"DIETARY_SUPPLEMENTS":                          16,
		"DIGITAL_SERVICES":                             17,
		"DIVERSIFIED_CHILDREN_PRODUCTS":                18,
		"DIVERSIFIED_ELECTRONICS":                      19,
		"DIVERSIFIED_ENTERTAINMENT":                    20,
		"DIVERSIFIED_EROTIC_MATERIAL":                  21,
		"DIVERSIFIED_HOME_AND_GARDEN_PRODUCTS":         22,
		"DIVERSIFIED_JEWELRY_AND_ACCESSORIES":          23,
		"DIVERSIFIED_HEALTH_AND_BEAUTY_PRODUCTS":       24,
		"DIVERSIFIES_HEALTH_AND_BEAUTY_PRODUCTS":       25,
		"EDUCATION":                                    26,
		"ELECTRONIC_EQUIPMENT_AND_RELATED_ACCESSORIES": 27,
		"EROTIC_CLOTHING_AND_ACCESSORIES":              28,
		"EVENT_TICKETS":                                29,
		"FOOD_AND_BEVERAGE":                            30,
		"FRAGRANCES":                                   31,
		"FURNITURE":                                    32,
		"GENERAL_SHOES_AND_CLOTHING":                   33,
		"HOBBY_ARTICLES":                               34,
		"HOUSEHOLD_ELECTRONICS":                        35,
		"JEWELRY_AND_WATCHES":                          36,
		"KITCHENWARE":                                  37,
		"MARKETPLACES":                                 38,
		"MUSIC_AND_MOVIES":                             39,
		"MUSICAL_INSTRUMENTS_AND_EQUIPMENT":            40,
		"NON_PRESCRIPTION_SUNGLASSES_AND_LENSES":       41,
		"OFFICE_MACHINES_AND_RELATED_ACCESSORIES":      42,
		"OTHER_SERVICES":                               43,
		"PERSONAL_CARE_AND_BODY_IMPROVEMENT":           44,
		"PET_SUPPLIES":                                 45,
		"PHARMACEUTICAL_PRODUCTS":                      46,
		"PLANTS_AND_FLOWERS":                           47,
		"PRESCRIPTION_OPTICS":                          48,
		"PRINTS_AND_PHOTOS":                            49,
		"SAFETY_PRODUCTS":                              50,
		"SEX_TOYS":                                     51,
		"SPORTS_GEAR_AND_OUTDOOR":                      52,
		"TOBACCO":                                      53,
		"TOOLS_AND_HOME_IMPROVEMENT":                   54,
		"TRAVEL_SERVICES":                              55,
		"UNDERWEAR":                                    56,
		"VIDEO_GAMES_AND_RELATED_ACCESSORIES":          57,
		"WHEELS_AND_TIRES":                             58,
		"WINE_BEER_AND_LIQUOR":                         59,
		"YOUTHFUL_SHOES_AND_CLOTHING":                  60,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_enumTypes[0].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_relay_onboarding_v1_paymentmethods_klarna_proto_enumTypes[0]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{0}
}

type Roles int32

const (
	Roles_APPLICANT                  Roles = 0
	Roles_CONTROL_OVER_MANAGEMENT    Roles = 1
	Roles_OWNER                      Roles = 2
	Roles_PARTNER                    Roles = 3
	Roles_SOLE_TRADER                Roles = 4
	Roles_ULTIMATE_BENEFICIAL_OWNER  Roles = 5
	Roles_MANAGING_DIRECTOR          Roles = 6
	Roles_POLITICALLY_EXPOSED_PERSON Roles = 7
	Roles_MATERIAL_INFLUENCER        Roles = 8
	Roles_NOT_APPLICABLE             Roles = 9
)

// Enum value maps for Roles.
var (
	Roles_name = map[int32]string{
		0: "APPLICANT",
		1: "CONTROL_OVER_MANAGEMENT",
		2: "OWNER",
		3: "PARTNER",
		4: "SOLE_TRADER",
		5: "ULTIMATE_BENEFICIAL_OWNER",
		6: "MANAGING_DIRECTOR",
		7: "POLITICALLY_EXPOSED_PERSON",
		8: "MATERIAL_INFLUENCER",
		9: "NOT_APPLICABLE",
	}
	Roles_value = map[string]int32{
		"APPLICANT":                  0,
		"CONTROL_OVER_MANAGEMENT":    1,
		"OWNER":                      2,
		"PARTNER":                    3,
		"SOLE_TRADER":                4,
		"ULTIMATE_BENEFICIAL_OWNER":  5,
		"MANAGING_DIRECTOR":          6,
		"POLITICALLY_EXPOSED_PERSON": 7,
		"MATERIAL_INFLUENCER":        8,
		"NOT_APPLICABLE":             9,
	}
)

func (x Roles) Enum() *Roles {
	p := new(Roles)
	*p = x
	return p
}

func (x Roles) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Roles) Descriptor() protoreflect.EnumDescriptor {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_enumTypes[1].Descriptor()
}

func (Roles) Type() protoreflect.EnumType {
	return &file_relay_onboarding_v1_paymentmethods_klarna_proto_enumTypes[1]
}

func (x Roles) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Roles.Descriptor instead.
func (Roles) EnumDescriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{1}
}

type InitializeRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessDetails     *BusinessDetails      `protobuf:"bytes,1,opt,name=business_details,json=businessDetails,proto3" json:"business_details,omitempty"`
	StoreDetails        *StoreDetails         `protobuf:"bytes,2,opt,name=store_details,json=storeDetails,proto3" json:"store_details,omitempty"`
	StakeholdersDetails []*StakeholderDetails `protobuf:"bytes,3,rep,name=stakeholders_details,json=stakeholdersDetails,proto3" json:"stakeholders_details,omitempty"`
}

func (x *InitializeRequestData) Reset() {
	*x = InitializeRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequestData) ProtoMessage() {}

func (x *InitializeRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequestData.ProtoReflect.Descriptor instead.
func (*InitializeRequestData) Descriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{0}
}

func (x *InitializeRequestData) GetBusinessDetails() *BusinessDetails {
	if x != nil {
		return x.BusinessDetails
	}
	return nil
}

func (x *InitializeRequestData) GetStoreDetails() *StoreDetails {
	if x != nil {
		return x.StoreDetails
	}
	return nil
}

func (x *InitializeRequestData) GetStakeholdersDetails() []*StakeholderDetails {
	if x != nil {
		return x.StakeholdersDetails
	}
	return nil
}

type UpdateRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessDetails     *BusinessDetails      `protobuf:"bytes,1,opt,name=business_details,json=businessDetails,proto3" json:"business_details,omitempty"`
	StoreDetails        *StoreDetails         `protobuf:"bytes,2,opt,name=store_details,json=storeDetails,proto3" json:"store_details,omitempty"`
	StakeholdersDetails []*StakeholderDetails `protobuf:"bytes,3,rep,name=stakeholders_details,json=stakeholdersDetails,proto3" json:"stakeholders_details,omitempty"`
}

func (x *UpdateRequestData) Reset() {
	*x = UpdateRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequestData) ProtoMessage() {}

func (x *UpdateRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequestData.ProtoReflect.Descriptor instead.
func (*UpdateRequestData) Descriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateRequestData) GetBusinessDetails() *BusinessDetails {
	if x != nil {
		return x.BusinessDetails
	}
	return nil
}

func (x *UpdateRequestData) GetStoreDetails() *StoreDetails {
	if x != nil {
		return x.StoreDetails
	}
	return nil
}

func (x *UpdateRequestData) GetStakeholdersDetails() []*StakeholderDetails {
	if x != nil {
		return x.StakeholdersDetails
	}
	return nil
}

type BusinessDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the company merchant is registered to.
	Name              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RegisteredAddress *Address                `protobuf:"bytes,2,opt,name=registered_address,json=registeredAddress,proto3" json:"registered_address,omitempty"`
	// Indicates if the merchant has a registered business or acting as a non-registered sole trader.
	IsRegistered bool `protobuf:"varint,3,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	// The id of the company merchant is registered to.
	RegistrationId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	// Boolean value indicating if merchant is subject to VAT.
	SubjectToVat bool `protobuf:"varint,5,opt,name=subject_to_vat,json=subjectToVat,proto3" json:"subject_to_vat,omitempty"`
	// VAT Id of the merchant.
	VatId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=vat_id,json=vatId,proto3" json:"vat_id,omitempty"`
}

func (x *BusinessDetails) Reset() {
	*x = BusinessDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessDetails) ProtoMessage() {}

func (x *BusinessDetails) ProtoReflect() protoreflect.Message {
	mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessDetails.ProtoReflect.Descriptor instead.
func (*BusinessDetails) Descriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{2}
}

func (x *BusinessDetails) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *BusinessDetails) GetRegisteredAddress() *Address {
	if x != nil {
		return x.RegisteredAddress
	}
	return nil
}

func (x *BusinessDetails) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

func (x *BusinessDetails) GetRegistrationId() *wrapperspb.StringValue {
	if x != nil {
		return x.RegistrationId
	}
	return nil
}

func (x *BusinessDetails) GetSubjectToVat() bool {
	if x != nil {
		return x.SubjectToVat
	}
	return false
}

func (x *BusinessDetails) GetVatId() *wrapperspb.StringValue {
	if x != nil {
		return x.VatId
	}
	return nil
}

type StakeholderDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource id in UUID format.
	ResourceId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The stakeholder's first name.
	GivenName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// The stakeholder's last name.
	FamilyName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// The stakeholder's date of birth in yyyy-MM-dd format.
	DateOfBirth *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Address     *Address               `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Personal id to identify the stakeholder.
	PersonalId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=personal_id,json=personalId,proto3" json:"personal_id,omitempty"`
	// Roles of stakeholder.
	Roles []Roles `protobuf:"varint,7,rep,packed,name=roles,proto3,enum=relay.onboarding.v1.paymentmethods.klarna.Roles" json:"roles,omitempty"`
}

func (x *StakeholderDetails) Reset() {
	*x = StakeholderDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeholderDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeholderDetails) ProtoMessage() {}

func (x *StakeholderDetails) ProtoReflect() protoreflect.Message {
	mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeholderDetails.ProtoReflect.Descriptor instead.
func (*StakeholderDetails) Descriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{3}
}

func (x *StakeholderDetails) GetResourceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *StakeholderDetails) GetGivenName() *wrapperspb.StringValue {
	if x != nil {
		return x.GivenName
	}
	return nil
}

func (x *StakeholderDetails) GetFamilyName() *wrapperspb.StringValue {
	if x != nil {
		return x.FamilyName
	}
	return nil
}

func (x *StakeholderDetails) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *StakeholderDetails) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StakeholderDetails) GetPersonalId() *wrapperspb.StringValue {
	if x != nil {
		return x.PersonalId
	}
	return nil
}

func (x *StakeholderDetails) GetRoles() []Roles {
	if x != nil {
		return x.Roles
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The street including the house number.
	Street *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	// Second address field for additional street information.
	Street2 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=street2,proto3" json:"street2,omitempty"`
	// The postal code.
	PostalCode *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// The city.
	City *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// The merchant's country ISO-3166 Aplpha-3
	CountryCode *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// The region/state (ISO_3166-2 format)
	Region *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{4}
}

func (x *Address) GetStreet() *wrapperspb.StringValue {
	if x != nil {
		return x.Street
	}
	return nil
}

func (x *Address) GetStreet2() *wrapperspb.StringValue {
	if x != nil {
		return x.Street2
	}
	return nil
}

func (x *Address) GetPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *Address) GetCity() *wrapperspb.StringValue {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *Address) GetCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *Address) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

type StoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the store (brand name).
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The URL where the store is reachable online.
	Url *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The industry/type of goods or services the store is selling.
	Category Category `protobuf:"varint,3,opt,name=category,proto3,enum=relay.onboarding.v1.paymentmethods.klarna.Category" json:"category,omitempty"`
	// The merchant's country ISO-3166 Aplpha-3
	CountryCode *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// The URL of the store's logo (PNG at least 180x180 px and maximum size of 2MB. For optimal display, Please choose a logo with transparent background and no white space). [ 0 .. 2083 ] characters
	LogoUrl *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	// The URL of the store's square icon (PNG at least 180x180 px, maximum size of 2MB and should be square. For best display, Please choose an icon with transparent background and no white space). [ 0 .. 2083 ] characters
	IconUrl *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// The merchant's preferred feature image. [ 0 .. 2083 ] characters
	FeatureImageUrl *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=feature_image_url,json=featureImageUrl,proto3" json:"feature_image_url,omitempty"`
	// The merchant's preferred facebook URL. [ 0 .. 2083 ] characters
	FacebookUrl *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	// The merchant's preferred instagram URL. [ 0 .. 2083 ] characters
	InstagramUrl *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=instagram_url,json=instagramUrl,proto3" json:"instagram_url,omitempty"`
	// The merchant's main email address that is used for communication and dispute resolution. [ 0 .. 255 ] characters
	AdminEmailAddress *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=admin_email_address,json=adminEmailAddress,proto3" json:"admin_email_address,omitempty"`
	// the email address used in case of fraud activities, when there was a detection of a Merchant doing a fraudulent transaction we send a Stop Request to this email address. [ 0 .. 255 ] characters.Regex: [ˆ@ ]+@[ˆ@ ]+\.[ˆ@ ]
	RiskEmailAddress *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=risk_email_address,json=riskEmailAddress,proto3" json:"risk_email_address,omitempty"`
	// The email address of the store's customer support. [ 0 .. 255 ] characters. Regex: [ˆ@ ]+@[ˆ@ ]+\.[ˆ@ ]
	CustomerSupportEmailAddress *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=customer_support_email_address,json=customerSupportEmailAddress,proto3" json:"customer_support_email_address,omitempty"`
	// The phone number of the store's customer support. Regex: [+]?[0-9]{8,19}
	CustomerSupportPhoneNumber *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=customer_support_phone_number,json=customerSupportPhoneNumber,proto3" json:"customer_support_phone_number,omitempty"`
}

func (x *StoreDetails) Reset() {
	*x = StoreDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDetails) ProtoMessage() {}

func (x *StoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDetails.ProtoReflect.Descriptor instead.
func (*StoreDetails) Descriptor() ([]byte, []int) {
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP(), []int{5}
}

func (x *StoreDetails) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StoreDetails) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *StoreDetails) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_ADULT_SHOES_AND_CLOTHING
}

func (x *StoreDetails) GetCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *StoreDetails) GetLogoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.LogoUrl
	}
	return nil
}

func (x *StoreDetails) GetIconUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IconUrl
	}
	return nil
}

func (x *StoreDetails) GetFeatureImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.FeatureImageUrl
	}
	return nil
}

func (x *StoreDetails) GetFacebookUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.FacebookUrl
	}
	return nil
}

func (x *StoreDetails) GetInstagramUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.InstagramUrl
	}
	return nil
}

func (x *StoreDetails) GetAdminEmailAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.AdminEmailAddress
	}
	return nil
}

func (x *StoreDetails) GetRiskEmailAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.RiskEmailAddress
	}
	return nil
}

func (x *StoreDetails) GetCustomerSupportEmailAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerSupportEmailAddress
	}
	return nil
}

func (x *StoreDetails) GetCustomerSupportPhoneNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerSupportPhoneNumber
	}
	return nil
}

var File_relay_onboarding_v1_paymentmethods_klarna_proto protoreflect.FileDescriptor

var file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x2f, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x29, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x02,
	0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5c,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e,
	0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x70, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e,
	0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xca,
	0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x70, 0x0a, 0x14, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61,
	0x72, 0x6e, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x0f,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x61, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x76,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x56, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x74, 0x49, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x4c, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x2e, 0x6b, 0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b,
	0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x32, 0x12, 0x3d, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x07, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x6b,
	0x6c, 0x61, 0x72, 0x6e, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x11, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x72, 0x69, 0x73, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x8c, 0x0d, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x48,
	0x4f, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x47, 0x53,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x47, 0x41, 0x5a, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x52,
	0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x10, 0x06, 0x12, 0x2b,
	0x0a, 0x27, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48,
	0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x52, 0x54, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x59, 0x53, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x41, 0x4e, 0x49, 0x54, 0x41, 0x52, 0x59, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10,
	0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x53, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x53, 0x10, 0x0c,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x53, 0x54, 0x55, 0x4d, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x53, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x49, 0x45, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x47, 0x49, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x11, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x49,
	0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x12,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x10, 0x13, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x4f, 0x54,
	0x49, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x15, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4a, 0x45, 0x57, 0x45, 0x4c, 0x52, 0x59, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x17,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x41, 0x55, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26,
	0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x46, 0x49, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x41, 0x55, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x55, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x52, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x1b, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x4f,
	0x54, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x1c, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x1d, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x45,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x41, 0x47,
	0x52, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f,
	0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f, 0x42, 0x42, 0x59,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x53, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x48,
	0x4f, 0x55, 0x53, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f,
	0x4e, 0x49, 0x43, 0x53, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x45, 0x57, 0x45, 0x4c, 0x52,
	0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x24, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x54, 0x43, 0x48, 0x45, 0x4e, 0x57, 0x41, 0x52, 0x45, 0x10, 0x25,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53,
	0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x56, 0x49, 0x45, 0x53, 0x10, 0x27, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x55, 0x53, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x28, 0x12,
	0x2a, 0x0a, 0x26, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4e, 0x47, 0x4c, 0x41, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x53, 0x45, 0x53, 0x10, 0x29, 0x12, 0x2b, 0x0a, 0x27, 0x4f,
	0x46, 0x46, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x53, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x2b, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x53, 0x10, 0x2d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x41,
	0x43, 0x45, 0x55, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x53, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x43, 0x53, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x53, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x32,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x4f, 0x59, 0x53, 0x10, 0x33, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x34, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x4f, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x10, 0x35, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x4f, 0x4c,
	0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x56,
	0x45, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x37, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x57, 0x45, 0x41, 0x52, 0x10, 0x38, 0x12, 0x27, 0x0a, 0x23,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x49, 0x45, 0x53, 0x10, 0x39, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x53, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x52, 0x45, 0x53, 0x10, 0x3a, 0x12, 0x18, 0x0a, 0x14, 0x57,
	0x49, 0x4e, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x51,
	0x55, 0x4f, 0x52, 0x10, 0x3b, 0x12, 0x1f, 0x0a, 0x1b, 0x59, 0x4f, 0x55, 0x54, 0x48, 0x46, 0x55,
	0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x54,
	0x48, 0x49, 0x4e, 0x47, 0x10, 0x3c, 0x2a, 0xdf, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x4e,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x4f, 0x4c, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53,
	0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4c, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x42, 0x76, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x64, 0x76, 0x65, 0x64, 0x37, 0x35, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67,
	0x6f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0xaa, 0x02, 0x29, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0x4b, 0x6c, 0x61, 0x72, 0x6e, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescOnce sync.Once
	file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescData = file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDesc
)

func file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescGZIP() []byte {
	file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescOnce.Do(func() {
		file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescData = protoimpl.X.CompressGZIP(file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescData)
	})
	return file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDescData
}

var file_relay_onboarding_v1_paymentmethods_klarna_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_relay_onboarding_v1_paymentmethods_klarna_proto_goTypes = []interface{}{
	(Category)(0),                  // 0: relay.onboarding.v1.paymentmethods.klarna.Category
	(Roles)(0),                     // 1: relay.onboarding.v1.paymentmethods.klarna.Roles
	(*InitializeRequestData)(nil),  // 2: relay.onboarding.v1.paymentmethods.klarna.InitializeRequestData
	(*UpdateRequestData)(nil),      // 3: relay.onboarding.v1.paymentmethods.klarna.UpdateRequestData
	(*BusinessDetails)(nil),        // 4: relay.onboarding.v1.paymentmethods.klarna.BusinessDetails
	(*StakeholderDetails)(nil),     // 5: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails
	(*Address)(nil),                // 6: relay.onboarding.v1.paymentmethods.klarna.Address
	(*StoreDetails)(nil),           // 7: relay.onboarding.v1.paymentmethods.klarna.StoreDetails
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
}
var file_relay_onboarding_v1_paymentmethods_klarna_proto_depIdxs = []int32{
	4,  // 0: relay.onboarding.v1.paymentmethods.klarna.InitializeRequestData.business_details:type_name -> relay.onboarding.v1.paymentmethods.klarna.BusinessDetails
	7,  // 1: relay.onboarding.v1.paymentmethods.klarna.InitializeRequestData.store_details:type_name -> relay.onboarding.v1.paymentmethods.klarna.StoreDetails
	5,  // 2: relay.onboarding.v1.paymentmethods.klarna.InitializeRequestData.stakeholders_details:type_name -> relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails
	4,  // 3: relay.onboarding.v1.paymentmethods.klarna.UpdateRequestData.business_details:type_name -> relay.onboarding.v1.paymentmethods.klarna.BusinessDetails
	7,  // 4: relay.onboarding.v1.paymentmethods.klarna.UpdateRequestData.store_details:type_name -> relay.onboarding.v1.paymentmethods.klarna.StoreDetails
	5,  // 5: relay.onboarding.v1.paymentmethods.klarna.UpdateRequestData.stakeholders_details:type_name -> relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails
	8,  // 6: relay.onboarding.v1.paymentmethods.klarna.BusinessDetails.name:type_name -> google.protobuf.StringValue
	6,  // 7: relay.onboarding.v1.paymentmethods.klarna.BusinessDetails.registered_address:type_name -> relay.onboarding.v1.paymentmethods.klarna.Address
	8,  // 8: relay.onboarding.v1.paymentmethods.klarna.BusinessDetails.registration_id:type_name -> google.protobuf.StringValue
	8,  // 9: relay.onboarding.v1.paymentmethods.klarna.BusinessDetails.vat_id:type_name -> google.protobuf.StringValue
	8,  // 10: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.resource_id:type_name -> google.protobuf.StringValue
	8,  // 11: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.given_name:type_name -> google.protobuf.StringValue
	8,  // 12: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.family_name:type_name -> google.protobuf.StringValue
	9,  // 13: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.date_of_birth:type_name -> google.protobuf.Timestamp
	6,  // 14: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.address:type_name -> relay.onboarding.v1.paymentmethods.klarna.Address
	8,  // 15: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.personal_id:type_name -> google.protobuf.StringValue
	1,  // 16: relay.onboarding.v1.paymentmethods.klarna.StakeholderDetails.roles:type_name -> relay.onboarding.v1.paymentmethods.klarna.Roles
	8,  // 17: relay.onboarding.v1.paymentmethods.klarna.Address.street:type_name -> google.protobuf.StringValue
	8,  // 18: relay.onboarding.v1.paymentmethods.klarna.Address.street2:type_name -> google.protobuf.StringValue
	8,  // 19: relay.onboarding.v1.paymentmethods.klarna.Address.postal_code:type_name -> google.protobuf.StringValue
	8,  // 20: relay.onboarding.v1.paymentmethods.klarna.Address.city:type_name -> google.protobuf.StringValue
	8,  // 21: relay.onboarding.v1.paymentmethods.klarna.Address.country_code:type_name -> google.protobuf.StringValue
	8,  // 22: relay.onboarding.v1.paymentmethods.klarna.Address.region:type_name -> google.protobuf.StringValue
	8,  // 23: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.name:type_name -> google.protobuf.StringValue
	8,  // 24: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.url:type_name -> google.protobuf.StringValue
	0,  // 25: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.category:type_name -> relay.onboarding.v1.paymentmethods.klarna.Category
	8,  // 26: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.country_code:type_name -> google.protobuf.StringValue
	8,  // 27: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.logo_url:type_name -> google.protobuf.StringValue
	8,  // 28: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.icon_url:type_name -> google.protobuf.StringValue
	8,  // 29: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.feature_image_url:type_name -> google.protobuf.StringValue
	8,  // 30: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.facebook_url:type_name -> google.protobuf.StringValue
	8,  // 31: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.instagram_url:type_name -> google.protobuf.StringValue
	8,  // 32: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.admin_email_address:type_name -> google.protobuf.StringValue
	8,  // 33: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.risk_email_address:type_name -> google.protobuf.StringValue
	8,  // 34: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.customer_support_email_address:type_name -> google.protobuf.StringValue
	8,  // 35: relay.onboarding.v1.paymentmethods.klarna.StoreDetails.customer_support_phone_number:type_name -> google.protobuf.StringValue
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_relay_onboarding_v1_paymentmethods_klarna_proto_init() }
func file_relay_onboarding_v1_paymentmethods_klarna_proto_init() {
	if File_relay_onboarding_v1_paymentmethods_klarna_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeholderDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relay_onboarding_v1_paymentmethods_klarna_proto_goTypes,
		DependencyIndexes: file_relay_onboarding_v1_paymentmethods_klarna_proto_depIdxs,
		EnumInfos:         file_relay_onboarding_v1_paymentmethods_klarna_proto_enumTypes,
		MessageInfos:      file_relay_onboarding_v1_paymentmethods_klarna_proto_msgTypes,
	}.Build()
	File_relay_onboarding_v1_paymentmethods_klarna_proto = out.File
	file_relay_onboarding_v1_paymentmethods_klarna_proto_rawDesc = nil
	file_relay_onboarding_v1_paymentmethods_klarna_proto_goTypes = nil
	file_relay_onboarding_v1_paymentmethods_klarna_proto_depIdxs = nil
}
